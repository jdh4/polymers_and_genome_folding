#!/usr/bin/env python

"""This Python script creates template scripts for Matplotlib."""

import sys
import os
import getopt

def usage():
  print 'mpl:'
  print '  -x, --xy        Flag for xy plot from data file'
  print '  -g              Flag for stress and viscosity plot'
  print '  -f, --file      Data file'
  print '  -n, --name      Name of figure'
  print '  -l, --legend    Create a legend'
  print '  -h, --help      Help menu'

try:
  options, args = getopt.getopt(sys.argv[1:], 'hxn:lf:g', ['help', 'xy', 'name=', 'legend', 'fin='])
except getopt.GetoptError, err:
  print str(err)
  usage()
  sys.exit(2)

# defaults
xy = False
gt = False
name = 'mpl'
legend = False
fin = ''

for option, value in options:
  if option in ('-h', '--help'):
    usage()
    sys.exit()
  elif option in ('-x', '--xy'):
    xy = True
  elif option in ('-g'):
    gt = True
  elif option in ('-n', '--name'):
    name = value
  elif option in ('-f', '--file'):
    fin = value
  elif option in ('-l', '--legend'):
    legend = True
  else:
    assert False, 'Command line error.'

if(xy):
  f = open('figure_' + name + '.py', 'w')
  f.write('import os\n')
  f.write('import time\n')
  f.write('import matplotlib\n')
  f.write('matplotlib.use(\'Agg\')\n')
  f.write('import matplotlib.pyplot as plt\n')
  f.write('import numpy as np\n')
  f.write('import pypolymer\n')
  f.write('\n')
  f.write('plt.rcParams[\'text.usetex\'] = True\n')
  f.write('plt.rcParams[\'axes.linewidth\'] = 0.5\n')
  f.write('plt.rcParams[\'axes.titlesize\'] = 8\n')
  f.write('plt.rcParams[\'axes.labelsize\'] = 10\n')
  f.write('plt.rcParams[\'xtick.labelsize\'] = 8\n')
  f.write('plt.rcParams[\'ytick.labelsize\'] = 8\n')
  f.write('plt.rcParams[\'font.size\'] = 8\n')
  f.write('plt.rcParams[\'legend.numpoints\'] = 1\n')
  f.write('plt.rcParams[\'legend.fontsize\'] = 6\n')
  f.write('plt.rcParams[\'legend.borderaxespad\'] = 1\n')
  f.write('plt.rcParams[\'lines.linewidth\'] = 0.5\n')
  f.write('plt.rcParams[\'lines.markersize\'] = 3\n')
  f.write('\n')
  f.write('fin = \'' + fin + '\'\n')
  f.write('x = np.array(pypolymer.get_data(fin, 0))\n')
  f.write('y = np.array(pypolymer.get_data(fin, 1))\n')
  f.write('\n')
  f.write('w = 8.0 / 2.54\n')
  f.write('h = (3.0 / 4.0) * w\n')
  f.write('\n')
  f.write('fig = plt.figure(1, figsize=(w, h))\n')
  f.write('ax1 = fig.add_subplot(1, 1, 1)\n')
  f.write('plt.plot(x, y, \'wo\', label=r\'$$\')\n')
  f.write('#plt.xlabel(r\'$$\')\n')
  f.write('#plt.ylabel(r\'$$\')\n')
  f.write('#plt.title(r\'$$\')\n')
  f.write('#plt.xlim(, )\n')
  f.write('#plt.ylim(, )\n')
  f.write('#lg = plt.legend( )\n')
  f.write('#lg.get_frame().set_linewidth(0.5)\n')
  f.write('plt.figtext(0.02, 0.95, os.getcwd().replace(\'_\', \'\_\'), fontsize=4, color=\'0.75\')\n')
  f.write('plt.figtext(0.02, 0.93, time.asctime(), fontsize=4, color=\'0.75\')\n')
  f.write('\n')
  f.write('fig.subplots_adjust(left=0.2, right=0.85, bottom=0.2, top=0.85, wspace=0.0, hspace=0.0)\n')
  f.write('\n')
  f.write('if 1:\n')
  f.write('  for ax in fig.axes:\n')
  f.write('    plt.setp(ax.patch, color=(0.9, 0.9, 0.9))\n')
  f.write('\n')
  f.write('outfile = \'' + name + '\'\n')
  f.write('plt.savefig(outfile + ' + '\'.png\', dpi=200)\n')
  f.write('#plt.savefig(outfile + ' + '\'.pdf\')\n')
  f.write('os.system(\'open -a Preview \' + outfile + \'.png&\\n\')\n')
  f.close()

if(gt):
  f = open('figure_' + name + '.py', 'w')
  f.write('import os\n')
  f.write('import time\n')
  f.write('import matplotlib\n')
  f.write('matplotlib.use(\'Agg\')\n')
  f.write('import matplotlib.pyplot as plt\n')
  f.write('import numpy as np\n')
  f.write('import pypolymer\n')
  f.write('\n')
  f.write('plt.rcParams[\'text.usetex\'] = True\n')
  f.write('plt.rcParams[\'axes.linewidth\'] = 0.5\n')
  f.write('plt.rcParams[\'axes.titlesize\'] = 8\n')
  f.write('plt.rcParams[\'axes.labelsize\'] = 10\n')
  f.write('plt.rcParams[\'xtick.labelsize\'] = 8\n')
  f.write('plt.rcParams[\'ytick.labelsize\'] = 8\n')
  f.write('plt.rcParams[\'font.size\'] = 8\n')
  f.write('plt.rcParams[\'legend.numpoints\'] = 1\n')
  f.write('plt.rcParams[\'legend.fontsize\'] = 6\n')
  f.write('plt.rcParams[\'legend.borderaxespad\'] = 1\n')
  f.write('plt.rcParams[\'lines.linewidth\'] = 0.5\n')
  f.write('plt.rcParams[\'lines.markersize\'] = 3\n')
  f.write('\n')
  f.write('fin = \'' + fin + '\'\n')
  f.write('sty = \'b-\'\n')
  f.write('t = np.array(pypolymer.get_data(fin, 0))\n')
  f.write('g = np.array(pypolymer.get_data(fin, 1))\n')
  f.write('s = np.array(pypolymer.get_data(fin + \'.viscosity\', 0))\n')
  f.write('n = np.array(pypolymer.get_data(fin + \'.viscosity\', 1))\n')
  f.write('\n')
  f.write('xmax1 = 5 # 1e6\n')
  f.write('xmin2 = 10\n')
  f.write('xmax2 = 1e7\n')
  f.write('viscosity = 235\n')
  f.write('ymax3 = 500\n')
  f.write('\n')
  f.write('fig = plt.figure(1, figsize=(4.5, 3.0))\n')
  f.write('plt.figtext(0.5, 0.9, r\'$M_{\mathrm{rings}} = ,~M_{\mathrm{linear}} = ,~N = $\', ha=\'center\')\n')
  f.write('\n')
  f.write('ax1 = fig.add_subplot(2, 2, 1)\n')
  f.write('plt.plot(t/1e6, g, sty)\n')
  f.write('plt.plot([0, xmax1], [0, 0], \'k-\')\n')
  f.write('plt.xlim(0, xmax1)\n')
  f.write('plt.ylim(-0.01, 0.01)\n')             
  f.write('plt.ylabel(r\'$G(t) \sigma^3 / \epsilon$\')\n')
  f.write('plt.setp(ax1.get_yticklabels()[0], visible=False)\n')
  f.write('\n')
  f.write('ax2 = fig.add_subplot(2, 2, 2)\n')
  f.write('plt.loglog(t, g, sty)\n')
  f.write('t_rouse = np.linspace(1e2, 1e4)\n')
  f.write('plt.loglog(t_rouse, 2*t_rouse**-0.5, \'k-\')\n')
  f.write('plt.text(1e3, 0.1, r\'$t^{-1/2}$\', fontsize=6)\n')
  f.write('plt.xlim(xmin2, xmax2)\n')
  f.write('plt.ylim(10**-4, 10**0)\n')
  f.write('plt.setp(ax2.get_yticklabels()[0], visible=False)\n')
  f.write('\n')
  f.write('ax3 = fig.add_subplot(2, 2, 3, sharex=ax1)\n')
  f.write('plt.plot(s/1e6, n, sty)\n')
  f.write('plt.plot([0, xmax1], [viscosity, viscosity], \'k:\')\n')
  f.write('plt.xlim(0, xmax1)\n')
  f.write('plt.ylim(0, ymax3)\n')
  f.write('plt.xlabel(r\'$t / 10^6~\\tau$\')\n')
  f.write('plt.ylabel(r\'$\eta(t)=\int_0^{t}G(s)ds$\')\n')
  f.write('#ylabel_pos = ax3.yaxis.get_label().get_position()\n')
  f.write('#ax3.yaxis.set_label_coords(-0.175, ylabel_pos[1])\n')
  f.write('#plt.yticks(np.arange(0, ymax3, 100))\n')
  f.write('\n')
  f.write('ax4 = fig.add_subplot(2, 2, 4, sharex=ax2)\n')
  f.write('plt.semilogx(s, n, sty)\n')
  f.write('plt.semilogx([xmin2, xmax2], [viscosity, viscosity], \'k:\')\n')
  f.write('plt.xlim(xmin2, xmax2)\n')
  f.write('plt.ylim(0, ymax3)\n')
  f.write('plt.text(1000, 1.05 * viscosity, r\'$\eta = \' + str(viscosity) + \'$\', fontsize=6)\n')
  f.write('plt.xlabel(r\'$t / \\tau$\')\n')
  f.write('\n')
  f.write('plt.figtext(0.02, 0.95, os.getcwd().replace(\'_\', \'\_\'), fontsize=4, color=\'0.75\')\n')
  f.write('plt.figtext(0.02, 0.93, time.asctime(), fontsize=4, color=\'0.75\')\n')
  f.write('\n')
  f.write('fig.subplots_adjust(left=0.2, right=0.95, bottom=0.15, top=0.85, wspace=0.4, hspace=0.0)\n')
  f.write('\n')
  f.write('for ax in fig.axes:\n')
  f.write('  plt.setp(ax.patch, color=(0.9, 0.9, 0.9))\n')
  f.write('\n')
  f.write('plt.setp(ax1.get_xticklabels() + ax2.get_xticklabels(), visible=False)\n')
  f.write('\n')
  f.write('xticks = ax3.xaxis.get_major_ticks() + ax4.xaxis.get_major_ticks() + ax4.xaxis.get_minor_ticks()\n')
  f.write('for tick in xticks:\n')
  f.write('  tick.tick2On = False\n')
  f.write('\n')
  f.write('outfile = \'' + name + '\'\n')
  f.write('plt.savefig(outfile + ' + '\'.png\', dpi=200)\n')
  f.write('#plt.savefig(outfile + ' + '\'.pdf\')\n')
  f.write('os.system(\'open -a Preview \' + outfile + \'.png&\\n\')\n')
  f.close()
